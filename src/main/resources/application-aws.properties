# ==============================
# AWS Production Configuration
# ==============================
spring.application.name=where-we-go

# ==============================
# DataSource Configuration (AWS RDS)
# ==============================
spring.datasource.url=jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Connection Pool Settings
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ==============================
# JPA Configuration (Production)
# ==============================
# AWS 환경에서는 update로 설정 (데이터 보존)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.use_sql_comments=false

# ==============================
# Redis Configuration (AWS ElastiCache)
# ==============================
# 현재는 로컬 Redis 사용, 향후 ElastiCache로 변경 가능
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.timeout=2000ms
spring.data.redis.lettuce.pool.max-active=8
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=0

# ==============================
# JWT Configuration
# ==============================
jwt.secret.key=${JWT_SECRET_KEY}

# ==============================
# Server Configuration
# ==============================
server.port=8080
server.error.include-message=always
server.tomcat.max-threads=200
server.tomcat.min-spare-threads=10

# ==============================
# External API Configuration
# ==============================
# Kakao API
kakao.api.key=${KAKAO_REST_API_KEY}
# Google Maps API
google.api.key=${GOOGLE_MAPS_API_KEY}

# ==============================
# Logging Configuration (Production)
# ==============================
# 운영환경에서는 로그 레벨을 INFO로 설정
logging.level.root=INFO
logging.level.com.example.wherewego=INFO
logging.level.org.hibernate.SQL=WARN
logging.level.org.springframework=WARN

# 로그 파일 설정
logging.file.name=/home/ubuntu/app/logs/application.log
logging.file.max-size=10MB
logging.file.max-history=30
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# ==============================
# Actuator Configuration (Health Check)
# ==============================
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
management.health.db.enabled=true
management.health.redis.enabled=true

# ==============================
# Security Configuration
# ==============================
# CORS 설정 (필요시 특정 도메인으로 제한)
# cors.allowed-origins=https://yourdomain.com
# cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
# cors.allowed-headers=*
# cors.allow-credentials=true