name: EC2 Direct Deploy (feat/place-system)

on:
  push:
    branches: [ feat/place-system ]
  pull_request:
    branches: [ feat/place-system ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Grant permission to gradlew
      run: chmod +x ./gradlew
      
    - name: Build Spring Boot App
      run: ./gradlew clean build -x test
      
    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v4
      with:
        name: wherewego-app
        path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/feat/place-system'
    
    env:
      DB_HOST: ${{ secrets.DB_HOST2 }}
      DB_PORT: ${{ secrets.DB_PORT || '3306' }}
      DB_NAME: ${{ secrets.DB_NAME2 }}
      DB_USERNAME: ${{ secrets.DB_USERNAME2 }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD2 }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
    
    steps:
    - name: Download JAR Artifact
      uses: actions/download-artifact@v4
      with:
        name: wherewego-app
        
    - name: Setup EC2 environment
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST2 }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY2 }}
        script: |
          # 애플리케이션 디렉토리 생성
          mkdir -p /home/ubuntu/app
          
          # Java 17 설치 확인 및 설치
          if ! java -version 2>&1 | grep -q "17"; then
            echo "Installing Java 17..."
            sudo apt update
            sudo apt install -y openjdk-17-jdk
          else
            echo "Java 17 already installed"
          fi
          
          # Java 버전 확인
          java -version
          
    - name: Copy JAR to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST2 }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY2 }}
        source: "*.jar"
        target: "/home/ubuntu/app/"
        overwrite: true
        
    - name: Stop existing application
      uses: appleboy/ssh-action@v0.1.10
      continue-on-error: true
      with:
        host: ${{ secrets.EC2_HOST2 }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY2 }}
        script: |
          echo "🔄 Stopping all existing Java applications..."
          
          # 모든 Java 프로세스 확인 및 where-we-go 관련 프로세스 강제 종료
          for pid in $(pgrep -f "java.*Where-we-go" || true); do
            if [ ! -z "$pid" ]; then
              echo "Killing Java process: $pid"
              sudo kill -9 $pid || echo "Failed to kill $pid"
            fi
          done
          
          # 포트 8080 사용하는 모든 프로세스 강제 종료
          sudo lsof -ti:8080 | xargs -r sudo kill -9 || echo "No process using port 8080 via lsof"
          sudo fuser -k 8080/tcp || echo "No process using port 8080 via fuser"
          
          # 추가적으로 pkill로 한번 더
          sudo pkill -9 -f 'java.*[Ww]here.*[Ww]e.*[Gg]o' || echo "No matching processes via pkill"
          
          sleep 10
          echo "✅ Stop process completed"
          
          # 최종 포트 확인
          if sudo lsof -i:8080; then
            echo "⚠️ Port 8080 still in use - attempting additional cleanup"
            sudo netstat -tlnp | grep 8080 | awk '{print $7}' | cut -d'/' -f1 | xargs -r sudo kill -9
          else
            echo "✅ Port 8080 is now free"
          fi
          
    - name: Start Spring Boot Application
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST2 }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY2 }}
        envs: DB_HOST,DB_PORT,DB_NAME,DB_USERNAME,DB_PASSWORD,JWT_SECRET_KEY,GOOGLE_MAPS_API_KEY
        script: |
          cd /home/ubuntu/app
          
          # 환경변수 파일 생성
          cat > .env << EOF
          DB_HOST=$DB_HOST
          DB_PORT=$DB_PORT
          DB_NAME=$DB_NAME
          DB_USERNAME=$DB_USERNAME
          DB_PASSWORD=$DB_PASSWORD
          JWT_SECRET_KEY=$JWT_SECRET_KEY
          GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY
          EOF
          
          # 환경변수 로드
          export $(cat .env | xargs)
          
          # Spring Boot 애플리케이션 시작
          nohup java -jar Where-we-go-0.0.1-SNAPSHOT.jar \
            --spring.profiles.active=dev \
            --spring.datasource.url="jdbc:mysql://$DB_HOST:$DB_PORT/$DB_NAME?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true" \
            --spring.datasource.username="$DB_USERNAME" \
            --spring.datasource.password="$DB_PASSWORD" \
            --jwt.secret.key="$JWT_SECRET_KEY" \
            --google.api.key="$GOOGLE_MAPS_API_KEY" \
            > app.log 2>&1 &
            
          # 애플리케이션 시작 확인
          sleep 15
          if pgrep -f 'java.*Where-we-go' > /dev/null; then
            echo "✅ Application process started successfully"
            echo "📋 Application log:"
            tail -20 app.log
          else
            echo "⚠️ Application process not found, but continuing to health check"
            echo "📋 Current log:"
            cat app.log || echo "No log file found"
          fi
          
          echo "🔍 Proceeding to health check for final verification..."
          
    - name: Health Check
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST2 }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY2 }}
        script: |
          # 헬스 체크 (최대 2분 재시도)
          for i in {1..4}; do
            echo "Health check attempt ${i}/4..."
            
            # 프로세스 확인
            if pgrep -f 'java.*Where-we-go' > /dev/null; then
              echo "✅ Java process is running"
              
              # 헬스 엔드포인트 확인
              if curl -f "http://localhost:8080/health" -s > /dev/null 2>&1; then
                echo "✅ Health check passed!"
                curl -s "http://localhost:8080/health" | head -3
                exit 0
              else
                echo "Health endpoint not ready yet..."
              fi
            else
              echo "Java process not found..."
            fi
            
            echo "Waiting 30 seconds..."
            sleep 30
          done
          
          echo "❌ Health check failed after 4 attempts"
          echo "📋 Application log:"
          tail -50 /home/ubuntu/app/app.log
          echo "📋 Process status:"
          ps aux | grep java
          exit 1