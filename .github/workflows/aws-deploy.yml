name: AWS Deployment Pipeline

on:
  push:
    branches: [ dev, main, feat/place-system ]
  pull_request:
    branches: [ dev, main, feat/place-system ]

env:
  JAVA_VERSION: '17'
  AWS_REGION: 'ap-northeast-2'  # 서울 리전

jobs:
  # ===============================
  # 테스트 및 빌드 작업
  # ===============================
  test-and-build:
    name: 🧪 Test & Build JAR
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 체크아웃
      uses: actions/checkout@v4

    - name: ☕ Java 17 설정
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'corretto'  # AWS Corretto 사용

    - name: 🐘 Gradle 캐시 설정
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 🔑 Gradle 실행 권한 부여
      run: chmod +x ./gradlew

    - name: 🧪 테스트 실행
      env:
        # 테스트용 환경변수
        SPRING_PROFILES_ACTIVE: test
        JWT_SECRET: test-jwt-secret-key
      run: ./gradlew test --info

    - name: 📊 테스트 결과 업로드
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          build/reports/tests/test/
          build/test-results/test/

    - name: 🏗️ JAR 파일 빌드
      env:
        SPRING_PROFILES_ACTIVE: aws
      run: ./gradlew bootJar -x test

    - name: 📦 JAR 파일 업로드
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: build/libs/*.jar

  # ===============================
  # AWS Elastic Beanstalk 배포
  # ===============================
  deploy-to-aws:
    name: 🚀 Deploy to AWS
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
    - name: 📥 체크아웃
      uses: actions/checkout@v4

    - name: 📦 JAR 파일 다운로드
      uses: actions/download-artifact@v4
      with:
        name: application-jar
        path: ./

    - name: 🏷️ 애플리케이션 버전 생성
      id: version
      run: |
        VERSION="v$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-7)"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"

    - name: 📁 배포 패키지 생성
      run: |
        # 배포에 필요한 파일들을 하나의 디렉터리에 모음
        mkdir -p deploy-package
        
        # JAR 파일 복사 (이름 표준화)
        cp *.jar deploy-package/application.jar
        
        # Elastic Beanstalk 설정 파일들 복사
        cp -r .ebextensions deploy-package/
        
        # 추가 설정 파일들 (필요시)
        cp -r src/main/resources/application-aws.properties deploy-package/ || true
        
        # 배포 패키지 압축
        cd deploy-package
        zip -r ../deploy-package.zip .
        cd ..
        
        echo "Deploy package contents:"
        unzip -l deploy-package.zip

    - name: ☁️ AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 📤 S3에 배포 패키지 업로드
      run: |
        # S3 버킷에 배포 패키지 업로드
        aws s3 cp deploy-package.zip s3://${{ vars.AWS_S3_BUCKET }}/wherewego/${{ steps.version.outputs.version }}/deploy-package.zip
        echo "Uploaded to: s3://${{ vars.AWS_S3_BUCKET }}/wherewego/${{ steps.version.outputs.version }}/deploy-package.zip"

    - name: 🏭 Elastic Beanstalk 애플리케이션 버전 생성
      run: |
        # 애플리케이션 버전 생성
        aws elasticbeanstalk create-application-version \
          --application-name ${{ vars.EB_APPLICATION_NAME }} \
          --version-label ${{ steps.version.outputs.version }} \
          --source-bundle S3Bucket=${{ vars.AWS_S3_BUCKET }},S3Key=wherewego/${{ steps.version.outputs.version }}/deploy-package.zip \
          --description "Deployed via GitHub Actions - ${{ github.sha }}"

    - name: 🚀 Elastic Beanstalk 환경 배포
      run: |
        # 환경별 배포
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          ENVIRONMENT_NAME="${{ vars.EB_ENVIRONMENT_NAME_PROD }}"
        else
          ENVIRONMENT_NAME="${{ vars.EB_ENVIRONMENT_NAME_DEV }}"
        fi
        
        echo "Deploying to environment: ${ENVIRONMENT_NAME}"
        
        # 환경 업데이트
        aws elasticbeanstalk update-environment \
          --application-name ${{ vars.EB_APPLICATION_NAME }} \
          --environment-name ${ENVIRONMENT_NAME} \
          --version-label ${{ steps.version.outputs.version }}

    - name: ⏳ 배포 완료 대기
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          ENVIRONMENT_NAME="${{ vars.EB_ENVIRONMENT_NAME_PROD }}"
        else
          ENVIRONMENT_NAME="${{ vars.EB_ENVIRONMENT_NAME_DEV }}"
        fi
        
        echo "Waiting for deployment to complete..."
        
        # 최대 10분 대기
        aws elasticbeanstalk wait environment-updated \
          --application-name ${{ vars.EB_APPLICATION_NAME }} \
          --environment-names ${ENVIRONMENT_NAME} \
          --max-attempts 20 \
          --delay 30

  # ===============================
  # 배포 후 검증
  # ===============================
  post-deploy-verification:
    name: ✅ Post-Deploy Health Check
    runs-on: ubuntu-latest
    needs: deploy-to-aws
    if: always() && needs.deploy-to-aws.result == 'success'

    steps:
    - name: 🏥 헬스 체크
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          HEALTH_URL="${{ vars.PROD_HEALTH_CHECK_URL }}"
        else
          HEALTH_URL="${{ vars.DEV_HEALTH_CHECK_URL }}"
        fi
        
        echo "Health check URL: ${HEALTH_URL}"
        
        # 헬스 체크 (최대 5분 재시도)
        for i in {1..10}; do
          echo "Health check attempt ${i}/10..."
          
          if curl -f "${HEALTH_URL}/actuator/health" -o /dev/null -s; then
            echo "✅ Health check passed!"
            exit 0
          fi
          
          echo "Health check failed, waiting 30 seconds..."
          sleep 30
        done
        
        echo "❌ Health check failed after 10 attempts"
        exit 1

    - name: 🧪 기본 API 테스트
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          API_URL="${{ vars.PROD_API_URL }}"
        else
          API_URL="${{ vars.DEV_API_URL }}"
        fi
        
        echo "Testing API endpoints..."
        
        # 기본 API 엔드포인트 테스트
        curl -f "${API_URL}/api/courses" -H "Accept: application/json" || echo "API test failed"

  # ===============================
  # 알림
  # ===============================
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [test-and-build, deploy-to-aws, post-deploy-verification]
    if: always()

    steps:
    - name: 📱 성공 알림
      if: needs.deploy-to-aws.result == 'success' && needs.post-deploy-verification.result == 'success'
      run: |
        echo "🎉 AWS 배포 성공!"
        echo "브랜치: ${{ github.ref_name }}"
        echo "커밋: ${{ github.sha }}"
        echo "배포 환경: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"

    - name: 🚨 실패 알림
      if: needs.test-and-build.result == 'failure' || needs.deploy-to-aws.result == 'failure'
      run: |
        echo "❌ AWS 배포 실패!"
        echo "브랜치: ${{ github.ref_name }}"
        echo "커밋: ${{ github.sha }}"
        echo "실패 단계: 빌드/배포"