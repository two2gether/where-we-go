name: Deploy to AWS ECS

on:
  push:
    branches: [ main, dev, feature/docker-deployment ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: wherewego-app
  CONTAINER_NAME: wherewego-app

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/feature/docker-deployment'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Notify deployment start
        run: |
          # 배포 시작 알림
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV_ICON="🚀"
            ENV_NAME="Production"
          else
            ENV_ICON="🧪"
            ENV_NAME="Development"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"attachments\": [{
              \"color\": \"#36a64f\",
              \"blocks\": [{
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"$ENV_ICON *WhereWeGo Deployment Started* 🏁\n배포를 시작합니다...\"
                }
              }, {
                \"type\": \"section\",
                \"fields\": [{
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Environment:*\n$ENV_NAME (${{ env.ENVIRONMENT }})\"
                }, {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Branch:*\n\`${{ github.ref_name }}\`\"
                }, {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Commit:*\n<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|\`$(echo ${{ github.sha }} | cut -c1-8)\`>\"
                }, {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Author:*\n${{ github.actor }}\"
                }]
              }]
            }]
          }" ${{ secrets.SLACK_WEBHOOK }}

      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "ECS_CLUSTER=wherewego-prod-cluster" >> $GITHUB_ENV
            echo "ECS_SERVICE=wherewego-prod-service" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "ECS_CLUSTER=wherewego-prod-cluster" >> $GITHUB_ENV
            echo "ECS_SERVICE=wherewego-prod-service" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Notify build start
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"⚙️ Docker 이미지 빌드 중... (약 2-3분 소요)\"
          }" ${{ secrets.SLACK_WEBHOOK }}

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # 빌드 시작 시간 기록
          BUILD_START=$(date +%s)
          # Docker 이미지 빌드 및 푸시
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # latest 태그도 푸시
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # 빌드 완료 알림
          BUILD_END=$(date +%s)
          BUILD_DURATION=$((BUILD_END - BUILD_START))
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"✅ Docker 빌드 완료! ECR 업로드 중... (소요시간: ${BUILD_DURATION}초)\"
          }" ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify ECS deployment start
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"🔄 ECS 서비스 배포 중... 잠시만 기다려주세요!\"
          }" ${{ secrets.SLACK_WEBHOOK }}

      - name: Update task definition and deploy
        run: |
          # 배포 시작 시간 기록
          DEPLOY_START=$(date +%s)
          # ECR URI를 태스크 정의에 반영
          sed "s|ECR_URI_PLACEHOLDER|${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ github.sha }}|g" aws/task-definition.json > temp-task-definition.json
          
          # 태스크 정의 등록
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://temp-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "✅ Task definition registered: $TASK_DEF_ARN"
          
          # 서비스 존재 여부 확인
          SERVICE_EXISTS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'length(services)' --output text 2>/dev/null || echo "0")
          
          if [[ "$SERVICE_EXISTS" == "0" ]]; then
            echo "🚀 Creating new ECS service..."
          
            # CloudFormation Outputs에서 리소스 ID 가져오기 (유동적)
            PUBLIC_SUBNET_1=$(aws cloudformation describe-stacks \
              --stack-name "wherewego-${{ env.ENVIRONMENT }}" \
              --query 'Stacks[0].Outputs[?OutputKey==`PublicSubnet1`].OutputValue' \
              --output text)
              
            PUBLIC_SUBNET_2=$(aws cloudformation describe-stacks \
              --stack-name "wherewego-${{ env.ENVIRONMENT }}" \
              --query 'Stacks[0].Outputs[?OutputKey==`PublicSubnet2`].OutputValue' \
              --output text)
              
            ECS_SECURITY_GROUP=$(aws cloudformation describe-stacks \
              --stack-name "wherewego-${{ env.ENVIRONMENT }}" \
              --query 'Stacks[0].Outputs[?OutputKey==`ECSSecurityGroup`].OutputValue' \
              --output text)
            
            echo "📋 CloudFormation Stack: wherewego-${{ env.ENVIRONMENT }}"
            echo "🔗 Using subnets: $PUBLIC_SUBNET_1, $PUBLIC_SUBNET_2"
            echo "🛡️ Using security group: $ECS_SECURITY_GROUP"
          
            # ECS 서비스 생성
            aws ecs create-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service-name ${{ env.ECS_SERVICE }} \
              --task-definition ${{ env.CONTAINER_NAME }} \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2],securityGroups=[$ECS_SECURITY_GROUP],assignPublicIp=ENABLED}"
          else
            echo "🔄 Updating existing ECS service..."
          
            # 기존 서비스 업데이트
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service ${{ env.ECS_SERVICE }} \
              --task-definition ${{ env.CONTAINER_NAME }} \
              --desired-count 1
          
            # 서비스 안정화 대기
            echo "⏳ Waiting for service stability..."
            aws ecs wait services-stable \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }}
          fi
          
          echo "✅ Deployment completed successfully!"
          
          # 배포 완료 시간 계산
          DEPLOY_END=$(date +%s)
          DEPLOY_DURATION=$((DEPLOY_END - DEPLOY_START))
          
          # 임시 파일 정리
          rm temp-task-definition.json
          
          # 배포 단계 완료 알림
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"🎯 ECS 배포 완료! (소요시간: ${DEPLOY_DURATION}초) 최종 검증 중...\"
          }" ${{ secrets.SLACK_WEBHOOK }}

      - name: Final deployment notification
        if: always()
        run: |
          # 전체 실행 시간 계산 (job 시작부터)
          JOB_START_TIME=$(date -d "${{ github.event.head_commit.timestamp }}" +%s)
          JOB_END_TIME=$(date +%s)
          TOTAL_DURATION=$((JOB_END_TIME - JOB_START_TIME))
          DURATION_MIN=$((TOTAL_DURATION / 60))
          DURATION_SEC=$((TOTAL_DURATION % 60))
          
          # 배포 결과에 따른 메시지 설정
          if [[ "${{ job.status }}" == "success" ]]; then
            COLOR="good"
            STATUS="✅ SUCCESS"
            MESSAGE="배포가 성공적으로 완료되었습니다!"
            EMOJI="🎉"
          else
            COLOR="danger" 
            STATUS="❌ FAILED"
            MESSAGE="배포 중 오류가 발생했습니다."
            EMOJI="💥"
          fi
          
          # 브랜치에 따른 환경 이모지
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV_ICON="🚀"
            ENV_NAME="Production"
          else
            ENV_ICON="🧪"
            ENV_NAME="Development"
          fi
          
          # 커밋 메시지 가져오기
          COMMIT_MSG=$(git log -1 --pretty=format:"%s" | head -c 50)
          
          # Slack 메시지 전송
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"attachments\": [{
              \"color\": \"$COLOR\",
              \"blocks\": [{
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"$EMOJI $ENV_ICON *WhereWeGo Deployment* $STATUS\n$MESSAGE\"
                }
              }, {
                \"type\": \"section\",
                \"fields\": [{
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Environment:*\n$ENV_NAME (${{ env.ENVIRONMENT }})\"
                }, {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Branch:*\n\`${{ github.ref_name }}\`\"
                }, {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Duration:*\n⏱️ ${DURATION_MIN}분 ${DURATION_SEC}초\"
                }, {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Author:*\n👤 ${{ github.actor }}\"
                }, {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Commit:*\n<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|\`$(echo ${{ github.sha }} | cut -c1-8)\`>\"
                }, {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Message:*\n💬 $COMMIT_MSG\"
                }]
              }, {
                \"type\": \"actions\",
                \"elements\": [{
                  \"type\": \"button\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"🔍 View Workflow\"
                  },
                  \"url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                }, {
                  \"type\": \"button\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"🚀 View App\"
                  },
                  \"url\": \"https://wherewego-app.example.com\"
                }]
              }]
            }]
          }" ${{ secrets.SLACK_WEBHOOK }}